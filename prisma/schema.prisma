generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?   // Made optional for OAuth users
  name              String?
  image             String?   // Profile image from OAuth providers
  organizationId    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // NEW TRIAL MANAGEMENT FIELDS
  trialStartDate    DateTime? @default(now())
  trialEndDate      DateTime?
  subscriptionStatus String   @default("TRIAL") // TRIAL, ACTIVE, EXPIRED, CANCELLED
  subscriptionType  String?   // MONTHLY, ANNUAL
  lastActiveDate    DateTime? @default(now())
  
  organization      Organization? @relation(fields: [organizationId], references: [id])
  conversations     Conversation[]
  accounts          Account[]      // OAuth accounts
  sessions          Session[]
  rsvps            WebinarRSVP[]  // Webinar RSVPs
  notifications    UserNotification[] // User notifications
  userProjects     UserProject[]  // Template-based guided projects
  pdfProcessings   PDFProcessing[] // PDF processing history
  webSearchLogs    WebSearchLog[] // Web search history
}

model Organization {
  id               String   @id @default(cuid())
  name             String
  mission          String?
  budget           String?
  staffSize        String?
  focusAreas       String?
  organizationType String?  // nonprofit, church, faith_based, social_enterprise
  state            String?  // US state abbreviation
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  users User[]
  conversations Conversation[]
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      String
  createdAt DateTime @default(now())
  
  // Cloud AI tracking fields
  aiModel          String?   // Track which cloud model was used
  modelTier        String?   // "enterprise", "professional", "standard"  
  processingTime   Int?      // Response time in milliseconds
  tokenEstimate    Int?      // Estimated token usage
  queryType        String?   // "strategic", "grants", "documents", "general"
  contextLength    Int?      // Context length used for this request
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminUser {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String   // Hashed password
  role      String   // "super_admin" | "admin"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  webinars Webinar[] // Webinars created by this admin
  notifications AdminNotification[] // Notifications sent by this admin
  projectTemplates ProjectTemplate[] // Project templates created by this admin
}

model Webinar {
  id            String   @id @default(cuid())
  title         String
  description   String
  scheduledDate DateTime
  timezone      String
  duration      Int      // Duration in minutes
  thumbnailUrl  String?
  uniqueSlug    String   @unique
  status        String   // "draft" | "published" | "live" | "completed"
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // New fields for public webinar system
  slug             String   @unique
  metaDescription  String?
  socialImageUrl   String?
  maxAttendees     Int      @default(100)
  isPublished      Boolean  @default(false)
  categories       Json?    // Array of category strings
  guestSpeakers    Json?    // Array of speaker objects
  materials        Json?    // Array of material objects
  jitsiRoomUrl     String?
  
  adminUser AdminUser     @relation(fields: [createdBy], references: [id])
  rsvps    WebinarRSVP[]
  notifications WebinarNotification[] // Automated webinar notifications
  userNotifications UserNotification[] // User notifications related to this webinar
}

model WebinarRSVP {
  id           String   @id @default(cuid())
  webinarId    String
  userId       String
  rsvpDate     DateTime @default(now())
  attended     Boolean  @default(false)
  reminderSent Boolean  @default(false)
  
  webinar Webinar @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([webinarId, userId]) // Prevent duplicate RSVPs
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  content     String
  type        String   // "announcement" | "webinar_reminder" | "webinar_starting" | "webinar_followup"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminNotification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        String   // "announcement" | "webinar_reminder" | "system"
  targetType  String   // "all_users" | "webinar_rsvps" | "specific_users"
  targetData  String?  // JSON string for specific targeting criteria
  scheduledAt DateTime? // For scheduled notifications
  sentAt      DateTime?
  status      String   // "draft" | "scheduled" | "sent" | "failed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  adminId String
  admin   AdminUser @relation(fields: [adminId], references: [id])
  
  userNotifications UserNotification[]
}

model UserNotification {
  id         String   @id @default(cuid())
  title      String
  message    String
  type       String   // "announcement" | "webinar_reminder" | "webinar_starting" | "webinar_followup"
  isRead     Boolean  @default(false)
  readAt     DateTime?
  createdAt  DateTime @default(now())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  adminNotificationId String?
  adminNotification   AdminNotification? @relation(fields: [adminNotificationId], references: [id])
  
  webinarId String?
  webinar   Webinar? @relation(fields: [webinarId], references: [id])
}

model WebinarNotification {
  id          String   @id @default(cuid())
  type        String   // "24_hours" | "1_hour" | "starting_now" | "followup"
  scheduledAt DateTime
  sentAt      DateTime?
  status      String   // "scheduled" | "sent" | "failed" | "cancelled"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  webinarId String
  webinar   Webinar @relation(fields: [webinarId], references: [id], onDelete: Cascade)
}

model Grant {
  id                    String   @id @default(cuid())
  opportunityId         String   @unique
  opportunityNumber     String?
  title                 String
  agencyCode           String?
  cfdaNumber           String?
  postingDate          DateTime?
  closeDate            DateTime?
  description          String?
  eligibilityCriteria  String?
  awardCeiling         Int?
  awardFloor           Int?
  estimatedFunding     Int?
  category             String?
  fundingInstrument    String?
  isActive             Boolean  @default(true)
  lastSyncedAt         DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([closeDate])
  @@index([agencyCode])
  @@index([cfdaNumber])
  @@map("grants")
}

model GrantSync {
  id              String   @id @default(cuid())
  fileName        String   @unique
  extractedDate   DateTime
  fileSize        String
  syncStatus      String   // "pending", "processing", "completed", "failed"
  recordsProcessed Int?
  recordsDeleted  Int?
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("grant_syncs")
}

// TEMPLATE SYSTEM MODELS FOR GUIDED NONPROFIT WORKFLOWS

model ProjectTemplate {
  id              String   @id @default(cuid())
  name            String   // "Launch My Nonprofit", "Grant Readiness", "Board Development"
  description     String   // Detailed description of the template
  category        String   // "startup", "funding", "governance", "operations", "growth"
  estimatedTime   Int      // Estimated completion time in hours
  difficulty      String   // "beginner", "intermediate", "advanced"
  prerequisites   Json?    // Array of prerequisite templates or requirements
  outcomes        Json?    // Array of expected outcomes
  isActive        Boolean  @default(true)
  isPublic        Boolean  @default(true) // Public templates vs organization-specific
  createdBy       String?  // Admin user who created this template
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  steps           ProjectStep[]
  userProjects    UserProject[]
  adminUser       AdminUser? @relation(fields: [createdBy], references: [id])
  
  @@index([category])
  @@index([isActive, isPublic])
  @@map("project_templates")
}

model ProjectStep {
  id              String   @id @default(cuid())
  templateId      String
  stepNumber      Int      // Sequential step number within template
  questionKey     String   // Unique key for this step (e.g., "organization_name", "mission_statement")
  questionText    String   // The actual question/prompt for the user
  questionType    String   // "text", "textarea", "select", "multi_select", "file_upload", "date"
  dataType        String   // "string", "number", "boolean", "array", "object"
  isRequired      Boolean  @default(true)
  validationRules Json?    // JSON object with validation rules
  helpText        String?  // Additional help or guidance for this step
  options         Json?    // For select/multi_select questions
  order           Int      // Display order within the step
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  template        ProjectTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  responses       TemplateResponse[]
  
  @@unique([templateId, stepNumber])
  @@index([templateId, order])
  @@map("project_steps")
}

model UserProject {
  id              String   @id @default(cuid())
  userId          String
  templateId      String
  title           String   // User's custom title for this project
  currentStep     Int      @default(1) // Current step number (1-based)
  status          String   @default("ACTIVE") // "ACTIVE", "PAUSED", "COMPLETED", "ABANDONED"
  progress        Float    @default(0.0) // Progress percentage (0.0 to 1.0)
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  lastActiveAt    DateTime @default(now())
  metadata        Json?    // Additional project-specific data
  intelligenceProfile Json? // LLM-optimized context for this user's responses
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  template        ProjectTemplate @relation(fields: [templateId], references: [id])
  responses       TemplateResponse[]
  
  @@unique([userId, templateId]) // One project per template per user
  @@index([userId, status])
  @@index([status, lastActiveAt])
  @@map("user_projects")
}

model TemplateResponse {
  id              String   @id @default(cuid())
  projectId       String
  stepId          String
  rawAnswer       String   // User's original response
  enhancedAnswer  String?  // AI-enhanced or processed version
  confidence      Float?   // AI confidence score (0.0 to 1.0)
  qualityScore    Float?   // Response quality score (0.0 to 1.0)
  isComplete      Boolean  @default(true)
  submittedAt     DateTime @default(now())
  reviewedAt      DateTime?
  metadata        Json?    // Additional response metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  project         UserProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  step            ProjectStep @relation(fields: [stepId], references: [id])
  
  @@unique([projectId, stepId]) // One response per step per project
  @@index([projectId, submittedAt])
  @@index([stepId, qualityScore])
  @@map("template_responses")
}

// PDF PROCESSING MODELS FOR DOCUMENT ANALYSIS

model PDFProcessing {
  id              String   @id @default(cuid())
  userId          String
  fileName        String
  fileSize        Int      // File size in bytes
  pageCount       Int
  extractedText   String   // Extracted text content
  documentType    String?  // AI-determined document type
  summary         String?  // AI-generated summary
  keyPoints       Json?    // Array of key points
  recommendations Json?    // Array of recommendations
  confidence      Float?   // AI confidence score (0.0 to 1.0)
  aiModel         String?  // Model used for analysis
  processingTime  Int?     // Processing time in milliseconds
  status          String   @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@map("pdf_processings")
}

// AI GUIDELINES MODEL FOR CONTEXTUAL AI PROMPTS

model AIGuideline {
  id               String   @id @default(cuid())
  name             String   // Guideline name/title
  category         String   // Category (e.g., "grant_writing", "board_governance", "fundraising")
  guidanceText     String   // The actual guidance/prompt text for AI
  conditions       Json?    // JSON object with conditional arrays: organizationTypes, budgetRanges, states, queryKeywords, templateIds
  priority         Int      @default(5) // Priority for ranking (1-10, higher = more important)
  isActive         Boolean  @default(true) // Whether this guideline is active
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([category, isActive])
  @@index([priority, isActive])
  @@map("ai_guidelines")
}

// WEB SEARCH LOGGING MODEL FOR TRACKING SEARCH QUERIES AND RESULTS

model WebSearchLog {
  id              String   @id @default(cuid())
  userId          String
  query           String
  category        String   @default("general") // 'grants', 'compliance', 'foundations', 'best-practices', 'general'
  resultsCount    Int
  processingTime  Int?     // Response time in milliseconds
  timestamp       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([timestamp])
  @@index([category])
  @@map("web_search_logs")
}
