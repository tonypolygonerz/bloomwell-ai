generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AdminNotification {
  id               String             @id
  title            String
  message          String
  type             String
  targetType       String
  targetData       String?
  scheduledAt      DateTime?
  sentAt           DateTime?
  status           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  adminId          String
  AdminUser        AdminUser          @relation(fields: [adminId], references: [id])
  UserNotification UserNotification[]
}

model AdminUser {
  id                String              @id
  username          String              @unique
  password          String
  role              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  AdminNotification AdminNotification[]
  Webinar           Webinar[]
  project_templates project_templates[]
}

model Conversation {
  id             String        @id
  title          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  userId         String
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  User           User          @relation(fields: [userId], references: [id])
  Message        Message[]
}

model Message {
  id             String       @id
  content        String
  role           String
  createdAt      DateTime     @default(now())
  conversationId String
  aiModel        String?
  contextLength  Int?
  modelTier      String?
  processingTime Int?
  queryType      String?
  tokenEstimate  Int?
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model MaintenanceMode {
  id          String    @id @default(cuid())
  environment String    @unique
  isEnabled   Boolean   @default(false)
  message     String?
  enabledAt   DateTime?
  enabledBy   String?
  updatedAt   DateTime  @updatedAt

  @@map("maintenance_mode")
}

model NotificationTemplate {
  id        String   @id
  name      String
  subject   String
  content   String
  type      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Organization {
  id               String   @id
  name             String
  mission          String?
  budget           String?
  staffSize        String?
  focusAreas       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  organizationType String?
  state            String?
  ein              String?
  isVerified       Boolean  @default(false)

  // NEW FIELDS for comprehensive profiling

  // Step 3: Team details
  fullTimeStaff Int?
  partTimeStaff Int?
  contractors   Int?
  volunteers    Int?
  boardSize     Int?
  keyRoles      Json?

  // Step 4: Budget details
  budgetPriorities Json? // Array of top 3 priorities

  // Step 5: Funding history flags
  hasReceivedGrants Boolean?

  // Step 7: Grant goals
  fundingGoals  Json? // Array of top 3 goals
  seekingAmount String? // Funding range
  timeline      String? // When they need funding

  // Step 8: Story
  successStory   String?
  problemSolving String?
  beneficiaries  String?
  dreamScenario  String?

  // Step 9: Communication
  emailPreferences Json?
  preferredContact String?
  bestTimeToReach  String?

  // Metadata
  profileCompleteness Int @default(0) // 0-100

  Conversation   Conversation[]
  User           User[]
  programs       Program[]
  teamMembers    TeamMember[]
  fundingHistory FundingHistory[]
  documents      Document[]
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String              @id
  email                String              @unique
  password             String?
  name                 String?
  image                String?
  organizationId       String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime
  trialStartDate       DateTime?           @default(now())
  trialEndDate         DateTime?
  subscriptionStatus   String              @default("TRIAL")
  subscriptionType     String?
  lastActiveDate       DateTime?           @default(now())
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  Account              Account[]
  Conversation         Conversation[]
  Session              Session[]
  Organization         Organization?       @relation(fields: [organizationId], references: [id])
  UserNotification     UserNotification[]
  WebinarRSVP          WebinarRSVP[]
  pdf_processings      pdf_processings[]
  user_projects        user_projects[]
  web_search_logs      web_search_logs[]
  onboardingProgress   OnboardingProgress?
}

model UserNotification {
  id                  String             @id
  title               String
  message             String
  type                String
  isRead              Boolean            @default(false)
  readAt              DateTime?
  createdAt           DateTime           @default(now())
  userId              String
  adminNotificationId String?
  webinarId           String?
  Webinar             Webinar?           @relation(fields: [webinarId], references: [id])
  AdminNotification   AdminNotification? @relation(fields: [adminNotificationId], references: [id])
  User                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webinar {
  id                  String                @id
  title               String
  description         String
  scheduledDate       DateTime
  timezone            String
  duration            Int
  thumbnailUrl        String?
  uniqueSlug          String                @unique
  status              String
  createdBy           String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  slug                String                @unique
  metaDescription     String?
  socialImageUrl      String?
  maxAttendees        Int                   @default(100)
  isPublished         Boolean               @default(false)
  categories          Json?
  guestSpeakers       Json?
  materials           Json?
  jitsiRoomUrl        String?
  UserNotification    UserNotification[]
  AdminUser           AdminUser             @relation(fields: [createdBy], references: [id])
  WebinarNotification WebinarNotification[]
  WebinarRSVP         WebinarRSVP[]
}

model WebinarNotification {
  id          String    @id
  type        String
  scheduledAt DateTime
  sentAt      DateTime?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  webinarId   String
  Webinar     Webinar   @relation(fields: [webinarId], references: [id], onDelete: Cascade)
}

model WebinarRSVP {
  id           String   @id
  webinarId    String
  userId       String
  rsvpDate     DateTime @default(now())
  attended     Boolean  @default(false)
  reminderSent Boolean  @default(false)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Webinar      Webinar  @relation(fields: [webinarId], references: [id], onDelete: Cascade)

  @@unique([webinarId, userId])
}

model ai_guidelines {
  id           String   @id
  name         String
  category     String
  guidanceText String
  conditions   Json?
  priority     Int      @default(5)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([priority, isActive])
  @@index([category, isActive])
}

model GrantSync {
  id               String   @id @default(cuid())
  fileName         String   @unique
  extractedDate    DateTime
  fileSize         String
  syncStatus       String
  recordsProcessed Int?
  recordsDeleted   Int?
  errorMessage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime

  @@map("grant_syncs")
}

model Grant {
  id                  String    @id @default(cuid())
  opportunityId       String    @unique
  opportunityNumber   String?
  title               String
  agencyCode          String?
  cfdaNumber          String?
  postingDate         DateTime?
  closeDate           DateTime?
  description         String?
  eligibilityCriteria String?
  awardCeiling        Int?
  awardFloor          Int?
  estimatedFunding    Int?
  category            String?
  fundingInstrument   String?
  isActive            Boolean   @default(true)
  lastSyncedAt        DateTime  @default(now())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime

  @@index([cfdaNumber])
  @@index([agencyCode])
  @@index([closeDate])
  @@map("grants")
}

model pdf_processings {
  id              String   @id
  userId          String
  fileName        String
  fileSize        Int
  pageCount       Int
  extractedText   String
  documentType    String?
  summary         String?
  keyPoints       Json?
  recommendations Json?
  confidence      Float?
  aiModel         String?
  processingTime  Int?
  status          String   @default("PROCESSING")
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([userId, createdAt])
}

model project_steps {
  id                 String               @id
  templateId         String
  stepNumber         Int
  questionKey        String
  questionText       String
  questionType       String
  dataType           String
  isRequired         Boolean              @default(true)
  validationRules    Json?
  helpText           String?
  options            Json?
  order              Int
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  project_templates  project_templates    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  template_responses template_responses[]

  @@unique([templateId, stepNumber])
  @@index([templateId, order])
}

model project_templates {
  id            String          @id
  name          String
  description   String
  category      String
  estimatedTime Int
  difficulty    String
  prerequisites Json?
  outcomes      Json?
  isActive      Boolean         @default(true)
  isPublic      Boolean         @default(true)
  createdBy     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  project_steps project_steps[]
  AdminUser     AdminUser?      @relation(fields: [createdBy], references: [id])
  user_projects user_projects[]

  @@index([isActive, isPublic])
  @@index([category])
}

model template_responses {
  id             String        @id
  projectId      String
  stepId         String
  rawAnswer      String
  enhancedAnswer String?
  confidence     Float?
  qualityScore   Float?
  isComplete     Boolean       @default(true)
  submittedAt    DateTime      @default(now())
  reviewedAt     DateTime?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  project_steps  project_steps @relation(fields: [stepId], references: [id])
  user_projects  user_projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, stepId])
  @@index([stepId, qualityScore])
  @@index([projectId, submittedAt])
}

model user_projects {
  id                  String               @id
  userId              String
  templateId          String
  title               String
  currentStep         Int                  @default(1)
  status              String               @default("ACTIVE")
  progress            Float                @default(0.0)
  startedAt           DateTime             @default(now())
  completedAt         DateTime?
  lastActiveAt        DateTime             @default(now())
  metadata            Json?
  intelligenceProfile Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  template_responses  template_responses[]
  project_templates   project_templates    @relation(fields: [templateId], references: [id])
  User                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
  @@index([status, lastActiveAt])
  @@index([userId, status])
}

model web_search_logs {
  id             String   @id
  userId         String
  query          String
  category       String   @default("general")
  resultsCount   Int
  processingTime Int?
  timestamp      DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([timestamp])
  @@index([userId])
}

// NEW: Track user's onboarding progress
model OnboardingProgress {
  id     String @id @default(cuid())
  userId String @unique

  // Track by section name instead of step numbers (initialize on API side)
  completedSections Json // Array: ["basics", "programs", "team", etc.]
  sectionScores     Json // Object: { "basics": 100, "programs": 60, ... }

  overallScore   Int       @default(0) // 0-100 percentage
  lastActiveDate DateTime  @default(now())
  completedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("onboarding_progress")
}

// NEW: Store program details
model Program {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  whoServed      String? // "Youth ages 12-18", "Homeless families"
  location       String? // "South Central LA", "Online nationwide"
  frequency      String? // "Weekly", "Monthly", "Annual"
  peopleServed   Int? // Annual count
  goals          String?
  successMetrics String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("programs")
}

// NEW: Store team member details
model TeamMember {
  id              String   @id @default(cuid())
  organizationId  String
  type            String // "staff", "volunteer", "board"
  name            String
  title           String?
  bio             String?
  livedExperience String? // Handled sensitively per Sara's approach
  email           String?
  phone           String?
  isPrimary       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("team_members")
}

// NEW: Track funding history
model FundingHistory {
  id             String   @id @default(cuid())
  organizationId String
  type           String // "received", "applied", "rejected"
  funderName     String
  amount         Float? // Stored as float for SQLite compatibility
  year           Int?
  purpose        String?
  status         String? // "active", "completed", "pending"
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("funding_history")
}

// NEW: Store uploaded documents
model Document {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  category       String   @default("legal") // "legal", "financial", "program"
  documentType   String // "990", "501c3", "bylaws", "articles", etc.
  fileName       String
  fileSize       Int
  fileUrl        String
  processedByAI  Boolean  @default(false)
  extractedData  Json? // Any data extracted from the document by AI
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([documentType])
  @@map("documents")
}
